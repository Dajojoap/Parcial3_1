import tkinter as tk
from tkinter import ttk, messagebox, simpledialog
import json
import os
import firebase_admin
from firebase_admin import credentials, db

# ------------------------------
# Configurar Firebase, esto conecta el programa a la base datos en firebase,
#el cred toca traerlo desde una carpeta de drive
# ------------------------------
def inicializar_firebase():
    if not firebase_admin._apps:
        try:
            cred = credentials.Certificate("parcial1-17baa-firebase-adminsdk-fbsvc-00fe96e281.json")
            firebase_admin.initialize_app(cred, {
                'databaseURL': 'https://parcial1-17baa-default-rtdb.firebaseio.com/biblioteca'
            })
        except Exception as e:
            messagebox.showerror("Firebase", f"No se pudo conectar a Firebase:\n{e}")

cred = credentials.Certificate("parcial1-17baa-firebase-adminsdk-fbsvc-00fe96e281.json")
firebase_admin.initialize_app(cred, {
    "databaseURL": "https://parcial1-17baa-default-rtdb.firebaseio.com"
})

# ------------------------------
# Clases de datos para guardar en json, clasifica los datos si es un usuario o un libro
# ------------------------------
class Libro:
    def __init__(self, titulo, autor, categoria, id_libro,disponibilidad):
        self.titulo = titulo
        self.autor = autor
        self.categoria = categoria
        self.id_libro = id_libro
        self.disponibilidad = disponibilidad

    def a_diccionario(self):
        return {
            "titulo": self.titulo,
            "autor": self.autor,
            "categoria": self.categoria,
            "id_libro": self.id_libro,
            "disponibilidad" : self.disponibilidad,
        }

class Usuario:
    def __init__(self, nombre, id_usuario):
        self.nombre = nombre
        self.id_usuario = id_usuario

    def a_diccionario(self):
        return {
            "nombre": self.nombre,
            "id_usuario": self.id_usuario
        }

# ------------------------------
# Aplicación principal, GUI
# ------------------------------
class BibliotecaApp: #ventana principal
    def __init__(self, raiz):
        self.raiz = raiz
        self.raiz.title("Sistema de Biblioteca")
        self.libros = []
        self.usuarios = []

        inicializar_firebase()
        self.cargar_datos_local()
        self.crear_interfaz()

    def crear_interfaz(self): #ventana principal, configuracion
        pestañas = ttk.Notebook(self.raiz)
        self.pestana_libros = ttk.Frame(pestañas)
        self.pestana_usuarios = ttk.Frame(pestañas)

        pestañas.add(self.pestana_libros, text="Libros")
        pestañas.add(self.pestana_usuarios, text="Usuarios")
        pestañas.pack(expand=1, fill="both")

        self.configurar_pestana_libros()
        self.configurar_pestana_usuarios()

    def configurar_pestana_libros(self): #ventana referente a libros y los datos a llenar
        ttk.Label(self.pestana_libros, text="Título:").grid(column=0, row=0)
        self.entrada_titulo = ttk.Entry(self.pestana_libros)
        self.entrada_titulo.grid(column=1, row=0)

        ttk.Label(self.pestana_libros, text="Autor:").grid(column=0, row=1)
        self.entrada_autor = ttk.Entry(self.pestana_libros)
        self.entrada_autor.grid(column=1, row=1)

        ttk.Label(self.pestana_libros, text="Categoría:").grid(column=0, row=2)
        self.combo_categoria = ttk.Combobox(self.pestana_libros, values=["Ciencia", "Literatura", "Ingeniería", "Artes"])
        self.combo_categoria.grid(column=1, row=2)

        ttk.Label(self.pestana_libros, text="ID del libro:").grid(column=0, row=3)
        self.entrada_id_libro = ttk.Entry(self.pestana_libros)
        self.entrada_id_libro.grid(column=1, row=3)

        ttk.Label(self.pestana_libros, text="Disponibilidad:").grid(column=0, row=4)
        self.disponibilidad = ttk.Combobox(self.pestana_libros, values=["disponible","no disponible"])
        self.disponibilidad.grid(column=1, row=4)
        
        ttk.Button(self.pestana_libros, text="Agregar libro", command=self.agregar_libro).grid(column=0, row=5, columnspan=2, pady=5)
       
        
        self.lista_libros = tk.Listbox(self.pestana_libros, width=60)
        self.lista_libros.grid(column=0, row=6, columnspan=2, pady=5)
        self.actualizar_lista_libros()
9
        # botones para buscar y listar (mostrar una lista de todos los libros registrados) libros
        ttk.Button(self.pestana_libros, text="Buscar libro", command=self.mostrar_busqueda_libro).grid(column=0, row=7, columnspan=2, pady=5)
        ttk.Button(self.pestana_libros, text="Listar libros", command=self.listar_libros_firebase).grid(column=0, row=8, columnspan=2, pady=5)

    def configurar_pestana_usuarios(self): #frame referente a la creacion de usuarios, con nombre y id
        ttk.Label(self.pestana_usuarios, text="Nombre:").grid(column=0, row=0)
        self.entrada_nombre = ttk.Entry(self.pestana_usuarios)
        self.entrada_nombre.grid(column=1, row=0)

        ttk.Label(self.pestana_usuarios, text="ID del usuario:").grid(column=0, row=1)
        self.entrada_id_usuario = ttk.Entry(self.pestana_usuarios)
        self.entrada_id_usuario.grid(column=1, row=1)

        ttk.Button(self.pestana_usuarios, text="Agregar usuario", command=self.agregar_usuario).grid(column=0, row=2, columnspan=2, pady=5)

        self.lista_usuarios = tk.Listbox(self.pestana_usuarios, width=60)
        self.lista_usuarios.grid(column=0, row=3, columnspan=2, pady=5)
        self.actualizar_lista_usuarios()

    def agregar_libro(self): #datos del libro a crear, guardar, etc en firebase
        titulo = self.entrada_titulo.get()
        autor = self.entrada_autor.get()
        categoria = self.combo_categoria.get()
        id_libro = self.entrada_id_libro.get()
        disponibilidad = self.disponibilidad.get()

        if not (titulo and autor and categoria and id_libro and disponibilidad):
            messagebox.showwarning("Error", "Por favor complete todos los campos del libro.")
            return

        libro = Libro(titulo, autor, categoria, id_libro,disponibilidad)
        self.libros.append(libro)
        self.guardar_datos_local()
        self.enviar_a_firebase("libros", id_libro, libro.a_diccionario())
        self.actualizar_lista_libros()

        self.entrada_titulo.delete(0, tk.END) #borra los datos presentes en las cajas despues del registro de un libro
        self.entrada_autor.delete(0, tk.END)
        self.combo_categoria.set('')
        self.entrada_id_libro.delete(0, tk.END)

    def agregar_usuario(self):  #parte que guarda los usuarios y la sube a firebase
        nombre = self.entrada_nombre.get()
        id_usuario = self.entrada_id_usuario.get()

        if not (nombre and id_usuario):
            messagebox.showwarning("Error", "Por favor complete todos los campos del usuario.")
            return

        usuario = Usuario(nombre, id_usuario)
        self.usuarios.append(usuario)
        self.guardar_datos_local()
        self.enviar_a_firebase("usuarios", id_usuario, usuario.a_diccionario())
        self.actualizar_lista_usuarios()

        self.entrada_nombre.delete(0, tk.END)
        self.entrada_id_usuario.delete(0, tk.END)

    def actualizar_lista_libros(self): #limpia los campos despues de un registro
        self.lista_libros.delete(0, tk.END)
        for libro in self.libros:
            self.lista_libros.insert(tk.END, f"{libro.id_libro} | {libro.titulo} por {libro.autor} [{libro.categoria}]")

    def actualizar_lista_usuarios(self):#limpia los campos despues de un registro
        self.lista_usuarios.delete(0, tk.END)
        for usuario in self.usuarios:
            self.lista_usuarios.insert(tk.END, f"{usuario.id_usuario} | {usuario.nombre}")

    def guardar_datos_local(self): #guarda y crea el json
        datos = {
            "libros": [libro.a_diccionario() for libro in self.libros],
            "usuarios": [usuario.a_diccionario() for usuario in self.usuarios]
        }
        with open("biblioteca_datos.json", "w") as f:
            json.dump(datos, f, indent=4)

    def cargar_datos_local(self): #carga los datos desde el archivo JSON
        if not os.path.exists("biblioteca_datos.json"):
            return
        with open("biblioteca_datos.json", "r") as f:
            datos = json.load(f)
            self.libros = [Libro(**lib) for lib in datos.get("libros", [])]
            self.usuarios = [Usuario(**usr) for usr in datos.get("usuarios", [])]

    def enviar_a_firebase(self, coleccion, clave, datos): #verifica si firebase funciona/esta conectado
        try:
            ref = db.reference(f"/{coleccion}/{clave}")
            ref.set(datos)
        except Exception as e:
            messagebox.showerror("Error Firebase", f"No se pudo subir a Firebase:\n{e}")

    # --------------------------
    # funciones de consulta de libros, esto nos ayuda a buscar el libro, nos especifica los datos del mismo y si esta disponible o no, (o si no existe)
    # --------------------------

    def buscar_libro(self, id_libro):
        ref = db.reference(f"/libros/{id_libro}")
        libro = ref.get()
        if libro:
            messagebox.showinfo("Libro encontrado", f"Título: {libro['titulo']}\nAutor: {libro['autor']}\nCategoría: {libro['categoria']}\ndisponibilidad: {libro['disponibilidad']}")
        else:
            messagebox.showwarning("No encontrado", "El libro no existe en la biblioteca.")

    def mostrar_busqueda_libro(self):
        id_libro = simpledialog.askstring("Buscar libro", "Ingrese el ID del libro a buscar:")
        if id_libro:
            self.buscar_libro(id_libro)

    def listar_libros_firebase(self): #esto registra si hay libros en firebase
        ref = db.reference("/libros")
        libros = ref.get()
        if libros:
            lista_libros = "\n".join([f"{libros[lib]['id_libro']} | {libros[lib]['titulo']} ({libros[lib]['autor']})" for lib in libros])
            messagebox.showinfo("Libros en Firebase", lista_libros)
        else:
            messagebox.showinfo("Sin libros", "No hay libros registrados en la biblioteca.")

# ------------------------------
# Ejecutar la aplicación
# ------------------------------
if __name__ == "__main__":
    raiz = tk.Tk()
    app = BibliotecaApp(raiz)
    raiz.mainloop()
